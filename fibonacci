#include <bits/stdc++.h>
using namespace std;

//
int fibonacci(int n){
    int first = 0;
    int second = 1;
    if (n < 2){
        return n;
    }
    for (int i = 1; i < n; i++){
        second = first + second;
        first = second - first;
    }
    return second;
}



//
struct Job{
    char id;
    int dead;
    int profit;
};

bool compare(Job a, Job b){
    return a.profit > b.profit;
}

void jobSchedule(Job arr[], int n){
    sort(arr, arr+n, compare);
    int result[n];
    bool slot[n];
    for (int i = 0; i < n; i++){
        slot[i] = false;
    }

    for (int i = 0; i < n; i++){
        for (int j = min(n, arr[i].dead)-1; j >= 0; j--){
            if (!slot[j]){
                result[j] = i;
                slot[j] = true;
                break;
            }
        }
    }
    //print the sequence
    for (int i = 0; i< n; i++){
        if (slot[i]) cout << arr[result[i]].id << "-->";
    }
}



//
struct Item{
    int value, weight;
    Item(int value, int weight){
        this->value = value;
        this->weight = weight;
    }
}


bool cmp(Item a, Item b){
    double r1 = (double)a.value / (double)a.weight;
    double r2 = (double)b.value / (double)b.weight;
    return r1 > r2;
}

double frac(Item arr[], int n, int W){
    sort(arr, arr+n, cmp);
    double result = 0.0;
    for (int i = 0; i < n; i++){
        if (arr[i].weight <= W){
            result += (double)arr[i].value;
            W -= arr[i].weight;
        }
        else{
            result += (double)arr[i].value * ((double)W / (double)arr[i].weight);
            break;
        }
    }
    return result;
}



///
int dp[100][100];


int KnapSack(int wt[], int val[], int W, int n){
    if (W == 0 || n == 0) return 0;
    
    if (dp[n][W]!= -1) return dp[n][W];
    if (wt[n-1] <= W){
        return dp[n][W] = max(val[n-1] + KnapSack(wt, val, W-wt[n-1], n-1), KnapSack(wt, val, W, n-1));
    }else{
        return dp[n][W] = KnapSack(wt, val, W, n-1);
    }
}


int main(){
    int wt[] = {2, 1, 3, 2};
    int val[] = {12, 10, 20, 15};
    int W = 5;
    memset(dp, -1, sizeof(dp));
    cout << KnapSack(wt, val, W, 4)<< endl;
    return 0;
}


//
#include <bits/stdc++.h>
using namespace std;

#define N 8

void printSolution(int board[N][N]){
    for (int i = 0; i < N; i++){
        for (int j = 0; j < N; j++){
            cout << board[i][j] << " ";
        }
        cout << endl;
    }
}

bool isSafe(int board[N][N], int row, int col){
    int i, j;
    for (i = 0; i < col; i++){
        if (board[row][i]) return false;
    }

    for (i = row, j = col; i >= 0 && j >= 0; i--, j--){
        if (board[i][j]){
            return false;
        }
    }

    for (i = row, j = col; j >= 0 && i < N; i++, j--){
        if (board[i][j]) return false;
    }

    return true;

}

bool solveNQUtil(int board[N][N], int col){
    if (col >= N){
        return true;
    }
    for (int i = 0; i < N; i++){
        if (isSafe(board, i , col)){
            board[i][col] = 1;
            if (solveNQUtil(board, col+1) == true){
                return true;
            }
            board[i][col] = 0;
        }
    }
    return false;
}

bool solveNQ(){
    int board[N][N] = {0};
    if (solveNQUtil(board, 0) == false){
        cout << "Solution does not exist" << endl;
        return false;
    }

    printSolution(board);
    return true;
}


int main(){
    solveNQ(); 
    return 0;
}

///
#include <bits/stdc++.h>
using namespace std;


int partition(int arr[], int p, int r){
    int pivot = arr[r];
    int i = p;
    for (int j = p; j < r; j++){
        if (arr[j] <= pivot){
            swap(arr[i], arr[j]);
            i++;
        }
    }
    swap(arr[i], arr[r]);
    return i;
}

int partition_r(int arr[], int p, int r){
    int i = p+rand()%(r);
    swap(arr[i], arr[r]);
    return partition(arr, p, r);
}

void quickSort(int arr[], int p, int r){
    if (p < r){
        int q = partition_r(arr, p, r);
        quickSort(arr, p, q-1);
        quickSort(arr, q+1, r);
    }
}


int main(){

    int arr[] = {2, 8, 7, 1, 3, 5, 6, 4};
    int n = sizeof(arr)/sizeof(arr[0]);
    quickSort(arr, 0, n-1);
    for (int i = 0; i < n; i++){
        cout << arr[i] << " ";
    }
    cout <<endl;

    return 0;
}


// int main(){
//     for (int i = 0; i < 10; i++){
//         cout << fibonacci(i) << " " ;
//     }
//     Job arr[] = {{'a', 2, 20}, {'b', 2, 15}, {'c', 1, 10},{'d', 3, 5}, {'e', 3, 1}};
//     jobSchedule(arr, 5);
//     return 0;
// }